@page "/product"

@inject IProductRepository _productRepository;
@inject IFileUpload _fileUpload;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h3" Color="Color.Primary">Product List</MudText>
    </MudItem>
    <MudItem xs="12" md="6" Class="mb-8">
        <div class="d-flex justify-end pt-2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="product/create">Add New Product</MudButton>
        </div>
    </MudItem>
    <MudItem xs="12">
        @if (allProducts.Any())
        {
            <MudSimpleTable Hover Bordered>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Shop Favorite</th>
                        <th>Customer Favorites</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in allProducts)
                    {
                        <tr>
                            <th>@product.Id</th>
                            <th>@product.Name</th>
                            <th><MudCheckBox Color="Color.Primary" Disabled @bind-Checked="@product.ShopFavorites" /></th>
                            <th><MudCheckBox Color="Color.Primary" Disabled @bind-Checked="@product.CustomerFavorites" /></th>
                            <th>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"product/edit/{product.Id}")">Edit</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-2" @onclick="()=>OpenDeleteDialog(product)">Delete</MudButton>
                            </th>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
        else
        {
            @if (IsLoading)
            {
                <div class="d-flex justify-center">
                    <MudProgressCircular Indeterminate Size="Size.Large" Color="Color.Primary" />
                </div>
            }
            else
            {
                <div class="d-flex justify-center">
                    <MudText Typo="Typo.h5">No products found.</MudText>
                </div>
            }
        }
    </MudItem>
</MudGrid>

@code {
    IEnumerable<ProductDTO> allProducts = new List<ProductDTO>();
    ProductDTO productToBeDeleted = new();
    bool IsLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
        }
    }

    private async Task LoadProducts()
    {
        allProducts = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async void DeleteProduct()
    {
        if (!string.IsNullOrEmpty(productToBeDeleted.ImageUrl))
            _fileUpload.DeleteFile(productToBeDeleted.ImageUrl);
        await _productRepository.Delete(productToBeDeleted.Id);
        await LoadProducts();
        Snackbar.Add("Product Deleted", Severity.Success);
    }

    private void OpenDeleteDialog(ProductDTO product)
    {
        productToBeDeleted = product;

        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this Product? This process cannot be undone.");
        parameters.Add("DeleteAction", new EventCallbackFactory().Create(this, DeleteProduct));

        DialogService.Show<DeleteDialog>($"Delete Product: {product.Name}", parameters);
    }
}
